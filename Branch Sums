#write function that takes sum of binary tree

# This is the class of the input root. Do not edit it.
class BinaryTree:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None


def branchSums(root):
	#for appending sums into list
    sums = []
	#sets out running sum to 0
	calculateBranchSums(root,0,sums)
	
	return sums

def calculateBranchSums(node,runningSum,sums):
	#if one of the node is none, we return
	if node is None:
		return
	#ew running sum for next node is previous plus curent
	newRunningSum = runningSum + node.value
	#if none on left and right then we append to new list in sums
	if node.left is None and node.right is None:
		sums.append(newRunningSum)
		return
	#call function to run the left and right node
	
	calculateBranchSums(node.left,newRunningSum,sums)
	calculateBranchSums(node.right,newRunningSum,sums)
	#time complex O(n) as time is constant
	#space complex is O(n) as it would become 2 times 2^k
